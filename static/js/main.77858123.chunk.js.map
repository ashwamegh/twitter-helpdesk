{"version":3,"sources":["components/Auth/index.js","components/TwitterConnect/index.js","components/AppBar/index.js","components/HelpDesk/index.js","App.js","serviceWorker.js","index.js","assets/images/twitter-icon.png"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","uiConfig","signInFlow","signInSuccessUrl","signInOptions","auth","GoogleAuthProvider","PROVIDER_ID","EmailAuthProvider","AuthContainer","styled","div","AuthOptionsWrapper","Auth","this","unregisterAuthObserver","onAuthStateChanged","user","localStorage","setItem","removeItem","firebaseAuth","Component","TwitterConnectWrap","TwitterConnectButton","Heading","h3","Image","img","withRouter","history","onClick","provider","TwitterAuthProvider","signInWithPopup","then","result","token","credential","accessToken","secret","push","catch","error","alert","handleTwitterSignIn","src","twitterLogo","alt","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","classes","className","AppBar","position","Toolbar","Typography","variant","Button","color","signOut","handleLogout","json","response","ProgressContainer","ChatContainer","ScrollableGrid","Grid","HelpDesk","props","fetchTweetThread","tweetID","tweetThread","state","tweets","filter","tweet","id_str","in_reply_to_status_id_str","reverse","setState","threadID","message","postThreadReply","bind","updateNewStatus","self","Pusher","cluster","forceTLS","subscribe","socketData","fetch","method","headers","body","JSON","stringify","key","getItem","data","console","log","status","screen_name","statusID","event","target","value","length","CircularProgress","style","margin","container","item","xs","Chatlist","borderLeft","Messagelist","minHeight","onChange","onSend","align","fit","in_reply_to_status_id","map","active","id","letter","name","split","imgUrl","profile_image_url_https","justify","ellipsis","nowrap","moment","Date","created_at","format","text","thread","avatar","onlyFirstWithMeta","authorName","date","PrivateRoute","currentUser","to","pathname","Routes","exact","path","component","TwitterConnect","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.77858123.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport firebase from \"firebase\";\nimport styled from \"styled-components\";\n\n// Configure Firebase.\nconst config = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DB_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: \"\",\n  messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n};\nfirebase.initializeApp(config);\n\n// Configure FirebaseUI.\nconst uiConfig = {\n  signInFlow: \"popup\",\n  signInSuccessUrl: \"/signedIn\",\n  signInOptions: [\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n    firebase.auth.EmailAuthProvider.PROVIDER_ID\n  ]\n};\n\nconst AuthContainer = styled.div`\n  text-align: center;\n`;\nconst AuthOptionsWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nclass Auth extends Component {\n  // Listen to the Firebase Auth state and set the local state.\n  componentDidMount() {\n    this.unregisterAuthObserver = firebase.auth().onAuthStateChanged(\n        (user) => {\n          if (user) {\n            localStorage.setItem('twitterHelpdesk.expectSignIn', '1')\n          } else {\n            localStorage.removeItem('twitterHelpdesk.expectSignIn')\n          }\n        }\n    );\n  }\n\n  // Un-register Firebase observers when the component unmounts.\n  componentWillUnmount() {\n    this.unregisterAuthObserver();\n  }\n\n  render() {\n    return(<AuthContainer>\n      <h1>Twitter HelpDesk</h1>\n      <p>Please sign-in to continue:</p>\n      <AuthOptionsWrapper>\n        <StyledFirebaseAuth\n          uiConfig={uiConfig}\n          firebaseAuth={firebase.auth()}\n        />\n      </AuthOptionsWrapper>\n    </AuthContainer>);\n  }\n}\n\nexport default Auth;\n","import React from \"react\";\nimport { withRouter } from 'react-router-dom';\nimport styled from \"styled-components\";\nimport firebase from 'firebase';\nimport twitterLogo from \"./../../assets/images/twitter-icon.png\";\n\nimport { AppBar } from \"./../\";\n\nconst TwitterConnectWrap = styled.div`\n  margin: 0 auto;\n  margin-top: 120px;\n  max-width: 290px;\n  min-height: 70px;\n  text-align: center;\n`;\nconst TwitterConnectButton = styled.div`\n  background: #b7b7b7f0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50px;\n  color: #000000e0;\n  max-width: 260px;\n  min-height: 56px;\n  cursor: pointer;\n  margin: 0 auto;\n`;\n\nconst Heading = styled.h3`\n  font-weight: 300;\n`;\n\nconst Image = styled.img`\n  width: 15%;\n`\n\nconst handleTwitterSignIn = (history) => {\n  const provider = new firebase.auth.TwitterAuthProvider();\n  firebase.auth().signInWithPopup(provider).then(function(result) {\n    // This gives you a the Twitter OAuth 1.0 Access Token and Secret.\n    const token = result.credential.accessToken;\n    const secret = result.credential.secret;\n    localStorage.setItem('twitterHelpdesk.accessToken', token);\n    localStorage.setItem('twitterHelpdesk.accessSecret', secret);\n    history.push('/helpdesk');\n  }).catch(function(error) {\n    alert(\"Error connecting Twitter\");\n  });\n}\n\nconst TwitterConnect = ({ history }) => (\n  <div>\n    <AppBar />\n    <TwitterConnectWrap>\n      <Heading>Connect your Twitter account</Heading>\n      <TwitterConnectButton onClick={() => handleTwitterSignIn(history)}>\n        <Image src={twitterLogo} alt=\"Twitter Logo\" />\n      </TwitterConnectButton>\n    </TwitterConnectWrap>\n  </div>\n);\n\nexport default withRouter(TwitterConnect);\n","import React from 'react';\nimport firebase from 'firebase';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { withRouter } from 'react-router-dom';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst handleLogout = (history) => {\n  firebase.auth().signOut();\n  localStorage.removeItem('twitterHelpdesk.expectSignIn');\n  history.push('/');\n}\n\nconst SimpleAppBar = ({ history }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Twitter HelpDesk\n          </Typography>\n          <Button color=\"inherit\" onClick={() => handleLogout(history)}>Logout</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default withRouter(SimpleAppBar);","import React, { Component } from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Pusher from \"pusher-js\";\nimport moment from \"moment\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {\n  ThemeProvider,\n  ChatList,\n  ChatListItem,\n  Avatar,\n  Column,\n  Row,\n  Title,\n  Subtitle,\n  Message,\n  MessageList,\n  MessageGroup,\n  MessageText,\n  TextComposer,\n  IconButton,\n  AddIcon,\n  TextInput,\n  SendButton\n} from \"@livechat/ui-kit\";\nimport styled from \"styled-components\";\nimport { AppBar } from \"./../\";\n\nconst json = response => {\n  return response.json();\n};\n\nconst ProgressContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 300px;\n`;\n\nconst ChatContainer = styled.div`\n  height: calc(100vh - 64px);\n  width: 100%;\n`;\n\nconst ScrollableGrid = styled(Grid)`\n  height: calc(100vh - 64px);\n  overflow-y: scroll;\n`;\n\nclass HelpDesk extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tweets: [],\n      tweetThread: [],\n      message: \"\",\n      threadID: \"\",\n    };\n\n    this.postThreadReply = this.postThreadReply.bind(this);\n    this.updateNewStatus = this.updateNewStatus.bind(this);\n  }\n\n  componentDidMount() {\n    const self = this;\n    const pusher = new Pusher(process.env.REACT_APP_PUSHER_KEY, {\n      cluster: \"ap2\",\n      forceTLS: true\n    });\n\n    const channel = pusher.subscribe(\"chat\");\n    channel.bind(\"message\", socketData => {\n      this.setState({ tweets: [socketData, ...this.state.tweets] }, () => {\n        this.fetchTweetThread(this.state.threadID);\n      });\n    });\n\n    fetch(`${process.env.REACT_APP_SERVER}/twitter/tweets`, {\n      method: \"post\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        key: localStorage.getItem(\"twitterHelpdesk.accessToken\"),\n        secret: localStorage.getItem(\"twitterHelpdesk.accessSecret\")\n      })\n    })\n      .then(json)\n      .then(function(data) {\n        self.setState({ tweets: data });\n      })\n      .catch(function(error) {\n        console.log(\"Request failed\", error);\n      });\n  }\n\n  fetchTweetThread = tweetID => {\n    const { tweets } = this.state;\n    const tweetThread = tweets\n      .filter(\n        tweet =>\n          tweet.id_str === tweetID ||\n          tweet.in_reply_to_status_id_str === tweetID\n      )\n      .reverse();\n    this.setState({ tweetThread, threadID: tweetID });\n  };\n\n  postThreadReply() {\n    const { message, tweetThread } = this.state;\n\n    fetch(`${process.env.REACT_APP_SERVER}/twitter/reply`, {\n      method: \"post\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        key: localStorage.getItem(\"twitterHelpdesk.accessToken\"),\n        secret: localStorage.getItem(\"twitterHelpdesk.accessSecret\"),\n        status: `@${tweetThread[0].user.screen_name} ${message}`,\n        statusID: tweetThread[0].id_str\n      })\n    })\n      .then(json)\n      .then(function(data) {\n        console.log(\"tweeted\");\n      })\n      .catch(function(error) {\n        console.log(\"Request failed\", error);\n      });\n  }\n\n  updateNewStatus(event) {\n    this.setState({ message: event.target.value });\n  }\n\n  render() {\n    const { tweets, tweetThread, threadID } = this.state;\n\n    return (\n      <ThemeProvider>\n        <AppBar />\n        {tweets.length === 0 ? (\n          <ProgressContainer>\n            <CircularProgress style={{ margin: 12 }} />\n          </ProgressContainer>\n        ) : (\n          <ChatContainer>\n            <Grid container spacing={0}>\n              <ScrollableGrid item xs={4}>\n                {Chatlist(tweets, this.fetchTweetThread, threadID)}\n              </ScrollableGrid>\n              <ScrollableGrid\n                item\n                xs={8}\n                style={{ borderLeft: \"1px solid #8080803d\" }}\n              >\n                {Messagelist(tweetThread)}\n                <TextComposer\n                  style={{ minHeight: 150 }}\n                  onChange={this.updateNewStatus}\n                  onSend={this.postThreadReply}\n                >\n                  <Row align=\"center\">\n                    <IconButton fit>\n                      <AddIcon />\n                    </IconButton>\n                    <TextInput />\n                    <SendButton fit />\n                  </Row>\n                </TextComposer>\n              </ScrollableGrid>\n            </Grid>\n          </ChatContainer>\n        )}\n      </ThemeProvider>\n    );\n  }\n}\n\n\nconst Chatlist = (tweets, fetchTweetThread, threadID) => {\n  return (\n    <ChatList>\n      {tweets\n        .filter(tweet => tweet.in_reply_to_status_id === null)\n        .map(tweet => {\n          return (\n            <ChatListItem\n              active={threadID === tweet.id_str}\n              key={tweet.id}\n              onClick={() => fetchTweetThread(tweet.id_str)}\n            >\n              <Avatar\n                letter={tweet.user.name.split(\"\")[0]}\n                imgUrl={tweet.user.profile_image_url_https}\n              />\n              <Column>\n                <Row justify>\n                  <Title ellipsis>{tweet.user.name.split(\" \")[0]}</Title>\n                  <Subtitle nowrap>\n                    {moment(new Date(tweet.created_at)).format(\"LT\")}\n                  </Subtitle>\n                </Row>\n                <Subtitle ellipsis>{tweet.text}</Subtitle>\n              </Column>\n            </ChatListItem>\n          );\n        })}\n    </ChatList>\n  );\n};\n\nconst Messagelist = tweetThread => {\n  return (\n    <MessageList active>\n      {tweetThread.map(thread => (\n        <MessageGroup\n          avatar={thread.user.profile_image_url_https}\n          onlyFirstWithMeta\n          key={thread.id}\n        >\n          <Message\n            authorName={thread.user.name}\n            date={`${moment(new Date(thread.created_at)).format(\n              \"ll\"\n            )} at ${moment(new Date(thread.created_at)).format(\"LT\")}`}\n          >\n            <MessageText>{thread.text}</MessageText>\n          </Message>\n        </MessageGroup>\n      ))}\n    </MessageList>\n  );\n};\n\nexport default HelpDesk;\n","import React from \"react\";\nimport firebase from \"firebase\";\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\nimport { Auth, TwitterConnect, HelpDesk } from \"./components\";\n\nconst PrivateRoute = props => {\n  return firebase.auth().currentUser != null ||\n    localStorage.getItem(\"twitterHelpdesk.expectSignIn\") ? (\n    <Route {...props} />\n  ) :\n  (\n    <Redirect\n      to={{\n        pathname: \"/\"\n      }}\n    />\n  );\n};\n\nconst Routes = () => {\n  return (\n    <Router>\n      <Route exact path=\"/\" component={Auth} />\n      <PrivateRoute path=\"/signedIn\" component={TwitterConnect} />\n      <PrivateRoute path=\"/helpdesk\" component={HelpDesk} />\n    </Router>\n  );\n};\n\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/twitter-icon.902f2b3a.png\";"],"sourceRoot":""}